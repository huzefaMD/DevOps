How to Install Kubernetes on Ubuntu 22.04

Set up Docker

1. Update the package list:

sudo apt update

2. Install Docker with the following command:

sudo apt install docker.io -y


3. Set Docker to launch on boot by entering:

sudo systemctl enable docker

4. Verify Docker is running:

sudo systemctl status docker

5. If Docker is not running, start it with the following command:

sudo systemctl start docker


Install Kubernetes

Step 1: Add Kubernetes Signing Key

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

Step 2: Add Software Repositories

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt update

Step 3: Install Kubernetes Tools

1. Run the install command:

sudo apt install kubeadm kubelet kubectl

2. Mark the packages as held back to prevent automatic installation, upgrade, or removal:

sudo apt-mark hold kubeadm kubelet kubectl

3. Verify the installation with:

kubeadm version


Deploy Kubernetes

Step 1: Prepare for Kubernetes Deployment

1. Disable all swap spaces with the swapoff command:

sudo swapoff -a

sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab


2. Load the required containerd modules. Start by opening the containerd configuration file in a text editor, such as nano:


sudo nano /etc/modules-load.d/containerd.conf

3. Add the following two lines to the file:

overlay
br_netfilter


4. Next, use the modprobe command to add the modules:

sudo modprobe overlay

sudo modprobe br_netfilter


5. Open the kubernetes.conf file to configure Kubernetes networking:

sudo nano /etc/sysctl.d/kubernetes.conf

6. Add the following lines to the file:
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1

7. Reload the configuration by typing:

sudo sysctl --system


Step 2: Assign Unique Hostname for Each Server Node


1. Decide which server will be the master node. Then, enter the command on that node to name it accordingly:

sudo hostnamectl set-hostname master-node


2. Next, set the hostname on the first worker node by entering the following command:


sudo hostnamectl set-hostname worker01


3. Edit the hosts file on each node by adding the IP addresses and hostnames of the servers that will be part of the cluster.

4. Restart the terminal application to apply the hostname change.


Step 3: Initialize Kubernetes on Master Node


1. Open the kubelet file in a text editor.

sudo nano /etc/default/kubelet

2. Add the following line to the file:

KUBELET_EXTRA_ARGS="--cgroup-driver=cgroupfs"

3. Reload the configuration and restart the kubelet:


sudo systemctl daemon-reload && sudo systemctl restart kubelet


4. Open the Docker daemon configuration file:

sudo nano /etc/docker/daemon.json

5. Append the following configuration block:

{
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
      "max-size": "100m"
   },
       "storage-driver": "overlay2"
       }

6. Reload the configuration and restart Docker:

sudo systemctl daemon-reload && sudo systemctl restart docker


7. Open the kubeadm configuration file:

sudo nano /lib/systemd/system/kubelet.service.d/10-kubeadm.conf


8. Add the following line to the file:

Environment="KUBELET_EXTRA_ARGS=--fail-swap-on=false"


9. Reload the configuration and restart the kubelet:


sudo systemctl daemon-reload && sudo systemctl restart kubelet


10. Finally, initialize the cluster by typing:

sudo kubeadm init --control-plane-endpoint=master-node --upload-certs



11. Create a directory for the Kubernetes cluster:

mkdir -p $HOME/.kube


12. Copy the configuration file to the directory:

sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

13. Change the ownership of the directory to the current user and group using the chown command:

sudo chown $(id -u):$(id -g) $HOME/.kube/config



Step 4: Deploy Pod Network to Cluster

1. Use kubectl to install Flannel:


kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

2. Untaint the node:

kubectl taint nodes --all node-role.kubernetes.io/control-plane-


Step 5: Join Worker Node to Cluster

1. Stop and disable AppArmor:


sudo systemctl stop apparmor && sudo systemctl disable apparmor


2. Restart containerd:

sudo systemctl restart containerd.service



3. Apply the kubeadm join command from Step 3 on worker nodes to connect them to the master node. Prefix the command with sudo:


sudo kubeadm join [master-node-ip]:6443 --token [token] --discovery-token-ca-cert-hash sha256:[hash]


4. After a few minutes, switch to the master server and enter the following command to check the status of the nodes:

kubectl get nodes


Conclusion

Next you should read











